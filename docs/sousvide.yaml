substitutions:
  display_name: "sousvide"
  upper_display_name: "Sous Vide"
  comment: Monoprice 36739 Sous Vide

esphome:
  name: ${display_name}
  comment: Monoprice 36739 Sous Vide

esp8266:
  board: esp01_1m

# Make sure logging is not using the serial port for Tuya commands
logger:
  baud_rate: 0

# Enable Home Assistant API
api:
  encryption:
    key: !secret sous_vide_key

ota:
  password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "${display_name}_AP"
    password: !secret wifi_password
    ap_timeout: 5min

captive_portal:

# Set GPIO pins for Tuya MCU communication
uart:  
  rx_pin: GPIO13
  tx_pin: GPIO15  
  baud_rate: 9600

# Register the Tuya MCU connection and set ID for lambda calls
tuya:
  id: "tuya_${display_name}"

# Script to update Status
script:
  - id: status_script
    then:
      - lambda: |-
          if ((id(powerstatus_internal).state == 0) || ((id(workstatus_internal).state == 0))) {
            id(${display_name}_workstatus).publish_state("Stopped");
          }
          else if ((id(workstatus_internal).state == 1)) {
            if ((id(tempshow_internal).state < id(tempset_internal).state)) {
              id(${display_name}_workstatus).publish_state("Preheating");
            }
            else if ((id(tempshow_internal).state >= id(tempset_internal).state)) {
              if ((id(${display_name}_remainingtime).state == 0)) {
                id(${display_name}_workstatus).publish_state("Ready");
              }
              else {
                id(${display_name}_workstatus).publish_state("Cooking");
              }
            }
          }
          else if ((id(workstatus_internal).state == 2)) {
            id(${display_name}_workstatus).publish_state("KeepWarm");
          }

# Controls
climate:
  - platform: tuya
    id: ${display_name}_climate
    name: "${upper_display_name} Controls"
    switch_datapoint: 101
    target_temperature_datapoint: 103
    current_temperature_datapoint: 104
    temperature_multiplier: 0.1
    visual:
      min_temperature: 20
      max_temperature: 95
      temperature_step: 0.1
    active_state_datapoint: 102
    active_state_heating_value: 1

switch:
  - platform: tuya
    id: ${display_name}_tempchanger
    name: "${upper_display_name} Temperature Units"
    icon: "mdi:temperature-celsius"
    switch_datapoint: 108
    restore_mode: RESTORE_DEFAULT_ON
    device_class: "switch"

number:
  - platform: tuya
    id: ${display_name}_settime
    name: "${upper_display_name} Set Time"
    icon: "mdi:clock-check-outline"
    number_datapoint: 105
    min_value: 0
    max_value: 5999
    step: 1

# Recipe Selector
select:
  - platform: template
    id: ${display_name}_recipe
    name: "${upper_display_name} Recipe"
    icon: "mdi:list-box-outline"
    options:
      - "None/Manual"
      - "Chicken(soft)"
      - "Chicken(soft+)"
      - "Chicken(cold)"
      - "Pork"
      - "Steak(Rare)"
      - "Steak(M-Rare)"
      - "Eggs"
    initial_option: "None/Manual"
    restore_value: false
    optimistic: true
    on_value:
      then:
        - lambda: |-
            if ((id(${display_name}_recipe).state == "Chicken(soft)")) {
              id(tuya_${display_name}).set_integer_datapoint_value(103,600);
              id(tuya_${display_name}).set_boolean_datapoint_value(101,1);
            }
            else if ((id(${display_name}_recipe).state == "Chicken(soft+)")) {
              id(tuya_${display_name}).set_integer_datapoint_value(103,630);
              id(tuya_${display_name}).set_boolean_datapoint_value(101,1);
            }
            else if ((id(${display_name}_recipe).state == "Chicken(cold)")) {
              id(tuya_${display_name}).set_integer_datapoint_value(103,660);
              id(tuya_${display_name}).set_boolean_datapoint_value(101,1);
            }
            else if ((id(${display_name}_recipe).state == "Pork")) {
              id(tuya_${display_name}).set_integer_datapoint_value(103,600);
              id(tuya_${display_name}).set_boolean_datapoint_value(101,1);
            }
            else if ((id(${display_name}_recipe).state == "Steak(Rare)")) {
              id(tuya_${display_name}).set_integer_datapoint_value(103,490);
              id(tuya_${display_name}).set_boolean_datapoint_value(101,1);
            }
            else if ((id(${display_name}_recipe).state == "Steak(M-Rare)")) {
              id(tuya_${display_name}).set_integer_datapoint_value(103,540);
              id(tuya_${display_name}).set_boolean_datapoint_value(101,1);
            }
            else if ((id(${display_name}_recipe).state == "Eggs")) {
              id(tuya_${display_name}).set_integer_datapoint_value(103,750);
              id(tuya_${display_name}).set_boolean_datapoint_value(101,1);
            }

# Sensors
sensor:
  # Uptime sensor to track ESP module uptime
  - platform: uptime
    id: ${display_name}_uptime
    name: "${upper_display_name} Uptime"
    update_interval: 5s
  # Internal sensor for current temp; used for determining stopped/preheating/cooking/keepwarm state
  - platform: tuya
    id: tempshow_internal
    sensor_datapoint: 104
    on_value:
      then:
        - script.execute: status_script
  # Internal sensor for target temp; used for determining stopped/preheating/cooking/keepwarm state
  - platform: tuya
    id: tempset_internal
    sensor_datapoint: 103
    on_value:
      then:
        - script.execute: status_script
  # Internal sensor for default off/cooking/keepwarm states; used for determining stopped/preheating/cooking/keepwarm state
  - platform: tuya
    id: workstatus_internal
    sensor_datapoint: 102
    icon: "mdi:play-pause"
    internal: true
    on_value:
      then:
        - script.execute: status_script
  - platform: tuya
    id: ${display_name}_remainingtime
    name: "${upper_display_name} Remaining Time"
    sensor_datapoint: 106
    icon: "mdi:timer-outline"
    unit_of_measurement: "min"
    device_class: "duration"
    state_class: "measurement"
    on_value:
      then:
        - script.execute: status_script
text_sensor:
  # External stopped/preheating/cooking/keepwarm state sensor
  - platform: template
    id: ${display_name}_workstatus
    name: "${upper_display_name} Status"
    icon: "mdi:play-pause"
binary_sensor:
  # Internal sensor for power state; used for determining stopped/preheating/cooking/keepwarm state
  - platform: tuya
    id: powerstatus_internal
    sensor_datapoint: 101
  - platform: tuya
    id: ${display_name}_fault
    name: "${upper_display_name} Fault Status"
    sensor_datapoint: 107
    icon: "mdi:water-boiler-alert"
    device_class: "problem"
